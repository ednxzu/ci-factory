---
name: build
on:
  push:
    branches:
      - main

jobs:
  generate:
    name: Generate
    runs-on: ubuntu-latest
    container:
      image: git.ednz.fr/container-factory/packer-runner:act-latest
      credentials:
        username: ${{ secrets.ACTIONS_USER }}
        password: ${{ secrets.ACTIONS_TOKEN }}
    strategy:
      matrix:
        build_group:
          - packer-runners
          - molecule-debian
          # - standard-runners
          # - molecule-ubuntu
          # - terraform-runners
          # - debian-ami
          # - ubuntu-ami
          # - ansible-runners
          # - renovate-runners
          # - certbot-runners
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Python dependencies
        uses: py-actions/py-dependency-install@v4
        with:
          path: "${{ gitea.workspace }}/requirements.txt"

      - name: Generate packer files
        run: factory generate --vault-login
        shell: bash
        working-directory: ${{ gitea.workspace }}
        env:
          VAULT_ADDR: https://vault.ednz.fr
          IMAGE_FACTORY_ENV: production
          IMAGE_FACTORY_INVENTORY: ${{ matrix.build_group }}
          IMAGE_FACTORY_VAULT_APPROLE_ID: ${{ secrets.VAULT_ROLE_ID }}
          IMAGE_FACTORY_VAULT_APPROLE_SECRET_ID: ${{ secrets.VAULT_SECRET_ID }}
          ANSIBLE_FORCE_COLOR: 'true'
          ANSIBLE_PYTHON_INTERPRETER: /usr/bin/python3

      - id: gen_output
        name: Ensure packer files are generated
        run: echo "build_targets=$(tree -d -J | jq -r -c '[.[0].contents[].name]')" >> "$GITHUB_OUTPUT"
        shell: bash
        working-directory: ${{ gitea.workspace }}/packer/builds

      - uses: cloudposse/github-action-matrix-outputs-write@main
        id: out
        with:
          matrix-step-name: generate
          matrix-key: ${{ matrix.build_group }}
          outputs: |-
            build_targets: ${{ steps.gen_output.outputs.build_targets }}

      - uses: actions/upload-artifact@v3
        with:
          name: build_files_${{ matrix.build_group }}
          path: ${{ gitea.workspace }}/packer/builds

  build:
    name: Build
    runs-on: ubuntu-latest
    container:
      image: git.ednz.fr/container-factory/packer-runner:act-latest
      credentials:
        username: ${{ secrets.ACTIONS_USER }}
        password: ${{ secrets.ACTIONS_TOKEN }}
    needs: generate
    strategy:
      matrix:
        build_group:
          - packer-runners
          - molecule-debian
          # - standard-runners
          # - molecule-ubuntu
          # - terraform-runners
          # - debian-ami
          # - ubuntu-ami
          # - ansible-runners
          # - renovate-runners
          # - certbot-runners
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: build_files_${{ matrix.build_group }}
          path: ${{ gitea.workspace }}/packer/builds

      - name: Ensure packer files are passed
        run: tree
        shell: bash
        working-directory: ${{ gitea.workspace }}/packer/builds

  read:
    runs-on: ubuntu-latest
    container:
      image: git.ednz.fr/container-factory/packer-runner:act-latest
      credentials:
        username: ${{ secrets.ACTIONS_USER }}
        password: ${{ secrets.ACTIONS_TOKEN }}
    needs: build
    steps:
      - uses: cloudposse/github-action-matrix-outputs-read@main
        id: read
        with:
          matrix-step-name: generate

      - name: Ensure outputs are correct
        run: |
          echo "test: $(jq -r . <<< ${{ fromJson(steps.read.outputs.result).build_targets.molecule-debian }})"
        shell: bash
        working-directory: ${{ gitea.workspace }}
    outputs:
      result: "${{ steps.read.outputs.result }}"

  verify:
    name: Verify
    runs-on: ubuntu-latest
    container:
      image: git.ednz.fr/container-factory/packer-runner:act-latest
      credentials:
        username: ${{ secrets.ACTIONS_USER }}
        password: ${{ secrets.ACTIONS_TOKEN }}
    needs: read
    steps:
      - name: Ensure outputs are correct
        run: |
          echo 'packer: ${{ fromJson(needs.read.outputs.result).build_targets.molecule-debian }}'
          echo 'molecule: ${{ fromJson(needs.read.outputs.result).build_targets.packer-runners }}'
          echo "${{ gitea.job }}"
        shell: bash
        working-directory: ${{ gitea.workspace }}
